vs <- fitAciC4num_V(d1,Rd)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i],Rd0[i])
jmax[i] <- js["Jmax"]
jmaxSE[i] <- js["JmaxSE"]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=Rd0[i]))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
}
ssq
# find minimum ssq
i_trans <- which.min(ssq)
rmse <- sqrt(ssq[i_trans]/length(data$Ci))
# best-fit parameters
pars <- data.frame(vcmax[i_trans],vpmax[i_trans],jmax[i_trans],Rd0[i_trans],
vcmaxSE[i_trans],vpmaxSE[i_trans],jmaxSE[i_trans],
rmse,i_trans+2)
names(pars) <- c("Vcmax","Vpmax","Jmax","Rd0","VcmaxSE","VpmaxSE","JmaxSE",
"RMSE","trans_pt")
return(pars)
pars
data
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], Rd = 1)
source("functions_zinny.R")    # all fitting functions
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], Rd = 1)
zinny_data_results4
zinny_data_results2 <- do_the_lot(zinny_data_list[[2]])
meanTleaf
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
# call nls to fit
fit <- try(nls(Photo ~ fAC4j(Vcmax=Vcmax, Vpmax25=Vpmax, Jmax25=JMAX25,
PPFD=PARi, Ci=Ci, Tleaf=meanTleaf, Rd0=Rd0),
start=list(JMAX25=100),trace=FALSE,
control=(nls.control(warnOnly=TRUE)),data = data))
fit
# Tleaf is not vectorised - just use mean
meanTleaf = mean(data$Tleaf)
# call nls to fit
fit <- try(nls(Photo ~ fAC4v(Vcmax, Vpmax25, Jmax25=100,
PPFD=PARi, Ci=Ci, Tleaf=meanTleaf, Rd = Rd[1]),
start=list(Vcmax=25, Vpmax25 = 20),trace=FALSE,
control=(nls.control(warnOnly=TRUE)),data = data))
coefs <- coef(summary(fit))
ret <- coefs[1:4]
names(ret) <- c("Vcmax","Vpmax","VcmaxSE","VpmaxSE")
ret
Vcmax
# First sort data by Ci
data <- subset(data, Ci > 0)
data <- data[order(data$Ci),]
meanTleaf <- mean(data$Tleaf)
# Find length of curve
len <- length(data$Ci)
# Need at least 5 points for this to work
if (len < 5) return
# Set up ssq array
ssq <- jmax <- vcmax <- vpmax <- Rd0 <- jmaxSE <- vcmaxSE <- vpmaxSE <- c()
# loop over possible transition points
for (i in 1:(len-4)) {
# cut dataset in 2
d1 <- data[1:(i+10),]
d2 <- data[(i+11):len,]
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1,Rd)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i],Rd0[i])
jmax[i] <- js["Jmax"]
jmaxSE[i] <- js["JmaxSE"]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=Rd0[i]))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
}
# find minimum ssq
i_trans <- which.min(ssq)
rmse <- sqrt(ssq[i_trans]/length(data$Ci))
# loop over possible transition points
for (i in 1:(len-4)) {
# cut dataset in 2
d1 <- data[1:(i+10),]
d2 <- data[(i+11):len,]
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1,Rd)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i],Rd0[i])
jmax[i] <- js["Jmax"]
jmaxSE[i] <- js["JmaxSE"]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=Rd0[i]))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
}
ssq
i = 86
# cut dataset in 2
d1 <- data[1:(i+10),]
d2 <- data[(i+11):len,]
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1,Rd)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i],Rd0[i])
d2
d2
tail(data)
len
# loop over possible transition points
for (i in 1:(len-10)) {
# cut dataset in 2
d1 <- data[1:(i+10),]
d2 <- data[(i+11):len,]
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1,Rd)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i],Rd0[i])
jmax[i] <- js["Jmax"]
jmaxSE[i] <- js["JmaxSE"]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=Rd0[i]))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
}
ssq
len
# loop over possible transition points
for (i in 1:(len-20)) {
# cut dataset in 2
d1 <- data[1:(i+10),]
d2 <- data[(i+11):len,]
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1,Rd)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i],Rd0[i])
jmax[i] <- js["Jmax"]
jmaxSE[i] <- js["JmaxSE"]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=Rd0[i]))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
}
ssq
# find minimum ssq
i_trans <- which.min(ssq)
rmse <- sqrt(ssq[i_trans]/length(data$Ci))
i_trans
rmse
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], Rd = 1)
source("functions_zinny.R")    # all fitting functions
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], Rd = 1)
zinny_data_results4
# Find length of curve
len <- length(data$Ci)
len
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], Rd = 2)
zinny_data_results4
zinny_data_results2 <- do_the_lot(zinny_data_list[[2]])
zinny_data_results2 <- do_the_lot(zinny_data_list[[2]], Rd = 1)
zinny_data_results2
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], Rd = 1)
zinny_data_results1
source("../fitAciC4/R/functions.R")    # all fitting functions
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], RdRatio = 0.1)
zinny_data_results4
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], RdRatio = 0.01)
zinny_data_results4
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_list[[4]]$Rd
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]], RdRatio = 0.01)
zinny_data_results4
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_list[[4]]$Rd[1]
zinny_data_results4
zinny_data_list[[1]]$Rd[1]
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.01)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.1)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.01)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.001)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.05)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.1)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.0001)
zinny_data_results1
zinny_data_results1 <- do_the_lot(zinny_data_list[[1]], RdRatio = 0.01)
zinny_data_results1
plot(Anet~Ci, data = zinny_data_list[[1]])
plot(Photo~Ci, data = zinny_data_list[[1]])
zinny_data_results1 <- do_the_lot(subset(zinny_data_list[[1]], Photo > 0), RdRatio = 0.01)
zinny_data_results1
zinny_data_results1 <- do_the_lot(subset(zinny_data_list[[1]], Photo > 0), RdRatio = 0.1)
zinny_data_results1
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
zinny_data_results4
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
# First sort data by Ci
data <- subset(data, Ci > 0)
data <- data[order(data$Ci),]
meanTleaf <- mean(data$Tleaf)
meanTleaf
# Find length of curve
len <- length(data$Ci)
# Need at least 5 points for this to work
if (len < 5) return
# Set up ssq array
ssq <- jmax <- vcmax <- vpmax <- Rd0 <- jmaxSE <- vcmaxSE <- vpmaxSE <- c()
# loop over possible transition points
for (i in 1:(len-20)) {
# cut dataset in 2
d1 <- data[1:(i+10),]
d2 <- data[(i+11):len,]
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1)
vcmax[i] <- vs["Vcmax"]
vpmax[i] <- vs["Vpmax"]
vcmaxSE[i] <- vs["VcmaxSE"]
vpmaxSE[i] <- vs["VpmaxSE"]
#Rd0[i] <- data$Rd[i]
# fit Jmax to upper portion of curve, given Rd0
js <- fitAciC4num_J(d2,vcmax[i],vpmax[i])
jmax[i] <- js["Jmax"]
jmaxSE[i] <- js["JmaxSE"]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=mean(data$Rd)))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
}
# find minimum ssq
i_trans <- which.min(ssq)
rmse <- sqrt(ssq[i_trans]/length(data$Ci))
# best-fit parameters
pars <- data.frame(vcmax[i_trans],vpmax[i_trans],jmax[i_trans],Rd0[i_trans],
vcmaxSE[i_trans],vpmaxSE[i_trans],jmaxSE[i_trans],
rmse,i_trans+2)
vcmax[i_trans]
vpmax[i_trans]
Rd0[i_trans]
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=RD0))
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf,RD0=RD0[i]))
# calculate ssq
fitted <- with(data,AciC4(Vcmax=vcmax[i],VPMAX25=vpmax[i],
JMAX25=jmax[i],
PPFD=PARi,Ci=Ci,Tleaf=meanTleaf))
ssq[i] <- sum((data$Photo-fitted$ALEAF)^2)
# best-fit parameters
pars <- data.frame(vcmax[i_trans],vpmax[i_trans],jmax[i_trans],
vcmaxSE[i_trans],vpmaxSE[i_trans],jmaxSE[i_trans],
rmse,i_trans+2)
names(pars) <- c("Vcmax","Vpmax","Jmax","VcmaxSE","VpmaxSE","JmaxSE",
"RMSE","trans_pt")
pars
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
zinny_data_results4
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("~/Documents/Git/fitAciC4/R/functions.R")
source("../fitAciC4/R/functions.R")    # all fitting functions
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
zinny_data_results4
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_list[[4]]$Rd[1]
Rd0[i_trans]
source("../fitAciC4/R/functions.R")    # all fitting functions
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
zinny_data_results4
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
coefs
# call nls to fit
fit <- try(nls(Photo ~ fAC4v(Vcmax, Vpmax25, Jmax25=100,
PPFD=PARi, Ci=Ci, Tleaf=meanTleaf, RdRatio=RdRatio,
Rd = meanRd),
start=list(Vcmax=25, Vpmax25 = 20),trace=FALSE,
control=(nls.control(warnOnly=TRUE)),data = data))
data = zinny_data_list[[4]]
# Tleaf is not vectorised - just use mean
meanTleaf = mean(data$Tleaf)
meanRd = mean(data$Rd)
# call nls to fit
fit <- try(nls(Photo ~ fAC4v(Vcmax, Vpmax25, Jmax25=100,
PPFD=PARi, Ci=Ci, Tleaf=meanTleaf, RdRatio=RdRatio,
Rd = meanRd),
start=list(Vcmax=25, Vpmax25 = 20),trace=FALSE,
control=(nls.control(warnOnly=TRUE)),data = data))
coefs <- coef(summary(fit))
coefs
ret <- coefs[1:4]
ret
source("~/Documents/Git/fitAciC4/R/AciC4.R")
source("AciC4_zinny.R")        # implements C4 model
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("../fitAciC4/R/AciC4.R")        # implements C4 model
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
source("AciC4_zinny.R")        # implements C4 model
# source("../fitAciC4/R/AciC4.R")        # implements C4 model
# source("../fitAciC4/R/functions.R")    # all fitting functions
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
# fit Vcmax and Vpmax to lower portion of curve
vs <- fitAciC4num_V(d1,RdRatio)
vs
fit
# source("../fitAciC4/R/AciC4.R")        # implements C4 model
# source("../fitAciC4/R/functions.R")    # all fitting functions
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
meanRd = mean(data$Rd)
meanRd
ret$Rd <- meanRd
ret$Rd
ret$Rd <- as.numeric(meanRd)
ret$Rd
# source("../fitAciC4/R/AciC4.R")        # implements C4 model
# source("../fitAciC4/R/functions.R")    # all fitting functions
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
ret
ret <- coefs[1:4]
names(ret) <- c("Vcmax","Vpmax","VcmaxSE","VpmaxSE")
ret
class(ret)
ret <- coefs[1:4]
ret[5] <- as.numeric(meanRd)
names(ret) <- c("Vcmax","Vpmax","VcmaxSE","VpmaxSE", "Rd")
ret
# source("../fitAciC4/R/AciC4.R")        # implements C4 model
# source("../fitAciC4/R/functions.R")    # all fitting functions
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
# source("../fitAciC4/R/AciC4.R")        # implements C4 model
# source("../fitAciC4/R/functions.R")    # all fitting functions
source("functions_zinny.R")
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
zinny_data_results4
zinny_data_list[[1]]$Rd[1]
zinny_data_results1 <- do_the_lot(subset(zinny_data_list[[1]], Photo > 0))
zinny_data_results1
# function do_the_lot fits the curve, finds the Ci transition point,
# visualises the fit
# then fits the empirical benchmark (rectnagular hyperbola)
# to see how well it can fit in comparison
# apply function to first curve to test
zinny_data_list[[4]]$Rd[1]
zinny_data_results4 <- do_the_lot(zinny_data_list[[4]])
zinny_data_results4
zinny_data_list[[2]]$Rd[1]
zinny_data_results2 <- do_the_lot(subset(zinny_data_list[[2]], Photo > 0))
zinny_data_results2
zinny_data_results2 <- do_the_lot(subset(zinny_data_list[[2]]))
zinny_data_results2
zinny_data_list[[2]]$Rd[1]
zinny_data_results2 <- do_the_lot(zinny_data_list[[2]])
zinny_data_results2
source("~/Documents/Git/fitAciC4/check_upper.R")
#source("../fitAciC4/check_upper.R")     # fits following Ainsworth approach
source("check_upper_zinny.R")     # fits following Ainsworth approach
zinny_data_list[[2]]$Rd[1]
zinny_data_results2 <- do_the_lot(zinny_data_list[[2]])
zinny_data_results2
zinny_data_list[[3]]$Rd[1]
zinny_data_results3 <- do_the_lot(zinny_data_list[[3]])
zinny_data_results3
zinny_data_list[[5]]$Rd[1]
zinny_data_list[[5]]
zinny_data_list[[6]]$Rd[1]
zinny_data_list[[7]]$Rd[1]
zinny_data_results7 <- do_the_lot(zinny_data_list[[7]])
zinny_data_results7
zinny_data_list[[8]]$Rd[1]
zinny_data_results8 <- do_the_lot(zinny_data_list[[8]])
zinny_data_results8
zinny_data_list[[9]]$Rd[1]
zinny_data_results9 <- do_the_lot(zinny_data_list[[9]])
zinny_data_results9
zinny_data_list[[9]]
zinny_data_list[[10]]$Rd[1]
zinny_data_results10 <- do_the_lot(zinny_data_list[[10]])
zinny_data_results10
zinny_data_list[[10]]
zinny_data_list[[10]]$Rd[1]
zinny_data_list[[11]]$Rd[1]
zinny_data_results11 <- do_the_lot(zinny_data_list[[11]])
zinny_data_list[[11]]
zinny_data_list[[30]]$Rd[1]
zinny_data_results30 <- do_the_lot(zinny_data_list[[30]])
zinny_data_results30
zinny_data_list[[30]]
zinny_data_list[[50]]$Rd[1]
zinny_data_list[[40]]$Rd[1]
zinny_data_list[[25]]$Rd[1]
zinny_data_results25 <- do_the_lot(zinny_data_list[[25]])
zinny_data_results25
zinny_data_list[[25]]
